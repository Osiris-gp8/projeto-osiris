name: Esteira de desenvolvimento da Osiris
on:
  push:
    branches: 
      - main
      - develop
      - feature/esteira
  workflow_dispatch:

jobs:

#   testes:
#     runs-on: ubuntu-latest
#     steps:

#       - uses: actions/checkout@v2

#       - name: Configurando vers達o do Java 
#         uses: actions/setup-java@v1
#         with:
#           java-version: '8'

#       - name: Configurando vers達o do Node.js
#         uses: actions/setup-node@v1
#         with:
#           node-version: '14.x'

#       - name: Executando testes do back-end
#         working-directory: osiris-api/
#         run: mvn clean install

#       - name: Executando testes do front-end
#         working-directory: front-end-osiris/
#         run: |
#           npm install
#           npm test --if-present

  build-teste:
    runs-on: ubuntu-latest
#     needs: testes
    steps:

      - uses: actions/checkout@v2

      - name: Configurando vers達o do Java
        uses: actions/setup-java@v1
        with:
          java-version: '8'

      - name: Configurando vers達o do Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Build do back-end
        working-directory: osiris-api/
        run: |
          mvn clean install
          mvn package -Dmaven.test.skip

      - name: Build do front-end
        working-directory: front-end-osiris/
        run: |
          npm install
          npm run build

  build-imagens:
    runs-on: ubuntu-latest
    needs: build-teste
    steps:
      - uses: actions/checkout@v2

      - name: Build imagem Back-end
        env:
          REGISTRY: ghcr.io

        run: |
          docker build --no-cache -f ./docker/springboot.dockerfile -t ${{ env.REGISTRY }}/Osiris-gp8/backend:latest-ti .
          docker build --no-cache -f ./docker/server.dockerfile -t ${{ env.REGISTRY }}/Osiris-gp8/server:latest-ti .

      - name: Push da imagem
        env:
          REGISTRY: ghcr.io

        run: |
          docker push ${{ env.REGISTRY }}/Osiris-gp8/backend:latest-ti
          docker push ${{ env.REGISTRY }}/Osiris-gp8/server:latest-ti

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-imagens
    environment:
      name: TI
    steps:

      - uses: actions/checkout@v2

      - name: Entrega do Back-end em TI
        env:
          PRIVATE_KEY: ${{ secrets.CHAVE_SSH }}
          HOSTNAME: ${{ secrets.AWS_ADRESS }}
          USER: ${{ secrets.AWS_USER }}
          REGISTRY: ghcr.io
          USER_REPO: ${{ secrets.USER_REPOSITORY }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOSTNAME} '
            cd /home/ubuntu/3CCO-2021-1-Grupo-08 &&
            git pull &&
            docker pull $REGISTRY/$USER_REPO/back-loadbalance:latest-ti
            docker pull $REGISTRY/$USER_REPO/backend:latest-ti
            docker-compose up -d --scale springboot=2
          '
